buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'org.hypergraphql'
version = '2.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8



repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

ext {
    jenaVersion = '3.14.0' //'3.8.0'
    cxfVersion = "3.3.7"
    cxfArtifacts = [
            'cxf-rt-frontend-jaxrs',
            'cxf-rt-transports-http',
            'cxf-rt-transports-http-jetty',
    ]
}
dependencies {
//    compile group: 'org.apache.openwebbeans', name: 'openwebbeans-gradle', version: '1.7.0'
    implementation 'com.graphql-java:graphql-java:2020-02-29T01-57-30-987fd78'

    implementation "org.apache.jena:jena-arq:$jenaVersion"
    implementation "org.apache.jena:jena:$jenaVersion"
    implementation "org.apache.jena:jena-core:$jenaVersion"
    implementation "org.apache.jena:jena-fuseki-main:$jenaVersion"
    implementation "org.apache.jena:jena-querybuilder:$jenaVersion"

    implementation "log4j:log4j:1.2.17"
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "org.slf4j:slf4j-log4j12:1.7.25"

    implementation "com.sparkjava:spark-core:2.9.1"
    implementation "com.sparkjava:spark-template-velocity:2.5.5"

    implementation "javax.ws.rs:javax.ws.rs-api:2.0"
    cxfArtifacts.each { artifact ->
        implementation "org.apache.cxf:$artifact:$cxfVersion"
    }
    implementation "org.apache.httpcomponents:httpclient:4.5.2"

    implementation "com.mashape.unirest:unirest-java:1.4.9"
    implementation "com.amazonaws:aws-java-sdk-s3:1.11.327"

    testImplementation "org.mockito:mockito-core:2.11.0"

    testImplementation "org.junit.platform:junit-platform-gradle-plugin:1.2.0"

    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

test {
    systemProperty 'hgql_version', project.version
//    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

task execute(type:JavaExec) {
    systemProperty('hgql_version', project.version)
    main = 'org.hypergraphql.Application'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty('a')){
        args(a.split(',' as Closure))
    }
}

sourceSets {
    main {
        resources {
            include '**/*.json', '**/*.xml', '**/*.vtl', '**/*.properties', '**/*.txt', '**/*.graphql', '**/*.sparql', '**/*.ttl'
        }
    }
}
import com.github.jengelman.gradle.plugins.shadow.transformers.XmlAppendingTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer


shadowJar {
    // merge SPI descriptors
    transform(AppendingTransformer) {
        resource='META-INF/cxf/bus-extensions.txt'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/cxf-extension-http-jetty.xml'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/cxf-extension-http.xml'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/cxf-servlet.xml'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/cxf.xml'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/cxf-extension-xml.xml'
    }

    zip64 = true

    exclude  'LICENSE', 'LICENSE/**', 'license', 'license/**'
    classifier = 'exe'

    manifest {
        attributes 'Class-Path': 'org.apache.cxf.transport.http'
        attributes("Main-Class": "org.hypergraphql.Application")
    }
}